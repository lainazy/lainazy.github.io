(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{61:function(a,t,r){"use strict";r.r(t);var e=r(0),s=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("div",{staticClass:"content"},[r("h1",{attrs:{id:"设计模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#设计模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 设计模式")]),r("blockquote",[r("p",[r("a",{attrs:{href:"http://www.runoob.com/design-pattern/design-pattern-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("设计模式 - 菜鸟教程")])])]),r("h2",{attrs:{id:"创建型模式-对象怎么生成"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建型模式-对象怎么生成","aria-hidden":"true"}},[a._v("#")]),a._v(" 创建型模式 - 对象怎么生成")]),r("h3",{attrs:{id:"工厂模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#工厂模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 工厂模式 **")]),r("p",[a._v("添加一个工厂类，内部调用多个其他简单类，生成多个简单对象，并组合这些简单对象来生成一个复杂对象。")]),r("p",[a._v("比如我们需要造一辆车，车由很多个零件组成。")]),r("ul",[r("li",[a._v("正常做法：new很多个零件对象，然后组合成一个汽车对象。")]),r("li",[a._v("工厂模式：创建一个汽车工厂类，在汽车工厂类内部实现new各个零件对象的操作并组合，最后返回创建的汽车对象，这样我们直接new这个汽车工厂类就可以方便的创建出汽车对象了。")])]),r("p",[r("em",[a._v("注意：复杂对象适合使用工厂模式，而简单对象，特别是只需要通过 new 就可以完成创建的对象，无需使用工厂模式。")])]),r("h3",{attrs:{id:"抽象工厂模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#抽象工厂模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 抽象工厂模式")]),r("p",[a._v("抽象工厂模式是工厂模式的强化版，就是再添加一个抽象工厂类，内部要求使用多个分类的子工厂类，添加具体工厂类来实现这个抽象工厂类，最后生成一个更复杂的对象。")]),r("p",[a._v("比如套装可以分为商务装和休闲装，每一种又可以分为上衣，裤子，鞋子等等。\n我们声明上衣工厂类，裤子工厂类，鞋子工厂类，然后声明一个套装抽象工厂类，要求创建套装时必须使用上衣工厂类，裤子工厂类，鞋子工厂类，然后我们声明商务装工厂类和休闲装工厂类来实现套装抽象工厂类，这样new商务装工厂类，就会自动使用了上衣工厂类，裤子工厂类，鞋子工厂类来创建一个商务套装对象。")]),r("h3",{attrs:{id:"单例模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#单例模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 单例模式 **")]),r("p",[a._v("通常做法就是将类第一次生成的实例对象保留，以后每次再实例化时，直接赋值为之前保留的实例。")]),r("h3",{attrs:{id:"建造者模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#建造者模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 建造者模式")]),r("p",[a._v("将一个复杂对象的创建拆分成多个简单对象的组合。\n比如套餐(复杂对象)包含米饭(简单对象)、配菜(简单对象)、饮料(简单对象)。")]),r("h3",{attrs:{id:"原型模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原型模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 原型模式")]),r("p",[a._v("通过克隆现有对象来生成新对象，而不是使用类来重新创建一个实例，当新创建一个类实例开销比较大时使用。")]),r("h2",{attrs:{id:"结构型模式-对象与对象的关系"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#结构型模式-对象与对象的关系","aria-hidden":"true"}},[a._v("#")]),a._v(" 结构型模式 - 对象与对象的关系")]),r("h3",{attrs:{id:"适配器模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#适配器模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 适配器模式")]),r("p",[a._v("作为两个不兼容接口之间的桥梁。通过继承或依赖其中一个对象，实现另一个接口功能。\n比如内存卡不能直接连接到电脑，通过读卡器就可以。")]),r("p",[a._v("实现方法：适配器类中使用接口1的实现类，然后接口2的实现类中使用适配器类来使用接口1的实现类的方法。")]),r("h3",{attrs:{id:"桥接模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#桥接模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 桥接模式")]),r("p",[a._v("将抽象化和实现化解耦，使两者可以独立变化。")]),r("p",[a._v("比如我们要画多种不同颜色的圆")]),r("ul",[r("li",[a._v("正常做法：创建一个shape抽象类，然后创建一个继承shape抽象类的circle类，然后创建继承circle类的各种颜色的circle类。")]),r("li",[a._v("桥接模式：添加一个桥接接口，桥接接口中有画圆的抽象方法，然后各种颜色的circle类实现这个桥接接口，再在shape抽象类中使用桥接接口，这样就可以在继承shape抽象类的circle类中使用桥接接口的画圆方法了，在创建circle类实例时传入对应桥接接口的实现类的实例，就可以画出对应颜色的圆。好处在于，我可以再直接创建一些实现了桥接接口的画各种颜色rectangle的类，而不需要先创建一个继承shape抽象类的rectangle类。")])]),r("h3",{attrs:{id:"过滤器模式-标准模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#过滤器模式-标准模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 过滤器模式/标准模式 **")]),r("p",[a._v("就是我们常用的过滤器，使用不同的标准(过滤器函数)从一组数据中过滤出符合标准的部分数据，或者将输入数据加工处理转变成想要的输出数据。")]),r("h3",{attrs:{id:"组合模式-树模式-部分整体模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#组合模式-树模式-部分整体模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 组合模式/树模式/部分整体模式")]),r("p",[a._v("将一组存在上下级关系的相似对象组合成一个树形结构，用统一的方式来处理这些对象，就像树一样，上一级节点对象中包含下一级节点对象，我们只需要关注一个节点的处理，然后递归的处理其他所有节点。")]),r("p",[a._v("算法题中常见的树结构相关的解题方法应该就是用了这个设计模式。")]),r("h3",{attrs:{id:"装饰器模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#装饰器模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 装饰器模式 *")]),r("p",[a._v("给现有的类提供额外的功能，同时又不改变其结构，其实就是对现有的类的一个包装。\n装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。")]),r("h3",{attrs:{id:"外观模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#外观模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 外观模式")]),r("p",[a._v("定义了一个高层、统一的接口，外部与通过这个统一的接口对子系统中的一群接口进行访问。\n比如一个系统提供了10个接口，我们正常使用时需要分别去调用这10个接口，使用外观模式，我们可以在高层再添加一个接口，用这个接口去调用这10个接口，然后使用时只需要调用这个高层接口就好了，可以通过参数去控制具体调用哪个接口。")]),r("h3",{attrs:{id:"享元模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#享元模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 享元模式 *")]),r("p",[a._v("重用现有的同类对象，如果未找到，则创建一个新对象。\n主要用于减少创建对象的数量，以减少内存占用和提高性能。")]),r("p",[a._v("如果一个类创建了大量的实例对象，而这些实例对象除了少数几个参数外其他都相同，那么就可以将相同的部分单独提取出来，在方法调用时通过参数传递进来，就可以重用这一部分。")]),r("h3",{attrs:{id:"代理模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#代理模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 代理模式 *")]),r("p",[a._v("在现有对象上添加一个代理层，用来控制对这个对象的访问。通常代理就是拦截原有的操作，在代理层中重新自定义操作。")]),r("h2",{attrs:{id:"行为型模式-对象与对象在干嘛"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#行为型模式-对象与对象在干嘛","aria-hidden":"true"}},[a._v("#")]),a._v(" 行为型模式 - 对象与对象在干嘛")]),r("h3",{attrs:{id:"责任链模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#责任链模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 责任链模式")]),r("p",[a._v("将请求和接收解耦，不需要明确指定一个请求由哪个接收者处理，而是把所有的接收者串联成一条链，请求只需要发送到这条接收链上，接收链会自动一级一级的确认由哪个接收者处理。前一个接收者不能处理就传递给下一个，接收链上的每一个接收者都存有对下一个接收者的引用。")]),r("h3",{attrs:{id:"命令模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#命令模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 命令模式")]),r("p",[a._v("将请求和接收解耦，请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。")]),r("p",[a._v("模式分析：")]),r("ol",[r("li",[a._v("命令模式的本质是"),r("strong",[a._v("对命令进行封装，将发出命令的责任和执行命令的责任分割开")]),a._v("。")]),r("li",[a._v("每一个命令都是一个操作："),r("strong",[a._v("请求的一方发出请求，要求执行一个操作；接收的一方收到请求，并执行操作")]),a._v("。")]),r("li",[a._v("命令模式允许请求的一方和接收的一方独立开来，使得"),r("strong",[a._v("请求的一方不必知道接收的一方的接口")]),a._v("，更不必知道请求是怎么被接收，以及操作是否被执行、何时被执行，以及是怎么被执行的。")]),r("li",[a._v("命令模式使请求本身成为一个对象，这个对象和其他对象一样可以被存储和传递。")]),r("li",[a._v("命令模式的关键在于引入了抽象命令接口，且发送者针对抽象命令接口编程，只有实现了抽象命令接口的具体命令才能与接收者相关联。")])]),r("p",[a._v("个人理解：")]),r("p",[a._v("系统命令行输入中，我们输入的命令就是请求对象，终端的命令处理程序就是接收对象，它接收我们输入的命令寻找对应的处理对象来执行我们的命令，终端程序不需要关心我们输入的命令是什么，可以独立编程，然后我们的命令能和它匹配就好了，这样就能将请求与接收解耦。")]),r("h3",{attrs:{id:"解释器模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#解释器模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 解释器模式")]),r("p",[a._v("给定一个语言之后，解释器模式可以定义出其文法的一种表示，并同时提供一个解释器。客户端可以使用这个解释器来解释这个语言中的句子。通常创造新的编程语言的时候才会用到。")]),r("h3",{attrs:{id:"迭代器模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#迭代器模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 迭代器模式")]),r("p",[a._v("抽象出一个迭代器类，将集合对象的遍历操作分离出来。")]),r("h3",{attrs:{id:"中介者模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#中介者模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 中介者模式")]),r("p",[a._v("提供一个中介者，将多个对象之间交互的网状结构分离为星型结构。\n比如，中国加入 WTO 之前是各个国家相互贸易，结构复杂，现在是各个国家通过 WTO 来互相贸易。")]),r("h3",{attrs:{id:"备忘录模式-快照模式-标记-token-模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#备忘录模式-快照模式-标记-token-模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 备忘录模式/快照模式/标记(Token)模式")]),r("p",[a._v("在不破坏封装性的前提下，捕获一个对象的某个状态，并在对象外保存这个状态，以便在适当的时候恢复到对象的这个状态。\n比如，游戏存档。")]),r("h3",{attrs:{id:"观察者模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#观察者模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 观察者模式 **")]),r("p",[a._v("定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。")]),r("p",[a._v("这个是最常见的了，事件监听器，数据对象监听等等。")]),r("h3",{attrs:{id:"发布订阅模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#发布订阅模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 发布订阅模式 **")]),r("p",[a._v("这是观察者模式最常用的一种，和普通观察者模式的主要区别在于订阅模式中间有一个调度中心，可以用来统一的从发布者接收发布的事件，然后再向对应的订阅者发布事件。")]),r("h3",{attrs:{id:"状态模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#状态模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 状态模式")]),r("p",[a._v("对象的行为依赖于它的状态(属性)，并且可以根据它的状态改变而改变它的相关行为。")]),r("p",[a._v("应该就是在对象的方法中，判断对象的属性，根据不同的属性值执行不同的代码。这样就可以通过改变对象的属性值来改变同一个方法的行为。")]),r("h3",{attrs:{id:"空对象模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#空对象模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 空对象模式")]),r("p",[a._v("在空对象模式(Null Object Pattern)中，一个空对象取代 NULL 对象实例的检查。Null 对象不是检查空值，而是反应一个不做任何动作的关系。这样的 Null 对象也可以在数据不可用的时候提供默认的行为。\n在空对象模式中，我们创建一个指定各种要执行的操作的抽象类和扩展该类的实体类，还创建一个未对该类做任何实现的空对象类，该空对象类将无缝地使用在需要检查空值的地方。")]),r("p",[a._v("这个模式没太搞懂，好像就是专门搞一个类来处理 null 情况，防止客户端报错的，感觉js里面不会用的这种模式。")]),r("h3",{attrs:{id:"策略模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#策略模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 策略模式")]),r("p",[a._v("有多个相似的策略类，仅仅只是行为不同，客户端自行选择使用哪个策略类。\n做一件事情有多种方式，提供这几种方式的实现让用户自己选择使用哪种。\n比如有飞机，火车，轮船几种出行方式，我们可以自己选择出行方式。")]),r("h3",{attrs:{id:"模板模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#模板模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 模板模式")]),r("p",[a._v("抽象出一个骨架结构，然后再往这个结构中填充内容。\n比如常用的html模板，抽象类和接口")]),r("h3",{attrs:{id:"访问者模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#访问者模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 访问者模式")]),r("p",[a._v("在数据基础类里面有一个方法接受访问者，将自身引用传入访问者。\n即在被访问类中添加一个方法，该方法接收一个访问者对象作为参数传入，然后在方法内部执行访问者对象的方法时将自身引用(this)作为参数传入。")]),r("h2",{attrs:{id:"j2ee-模式-对象合起来要干嘛"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#j2ee-模式-对象合起来要干嘛","aria-hidden":"true"}},[a._v("#")]),a._v(" J2EE 模式 - 对象合起来要干嘛")]),r("h3",{attrs:{id:"mvc-模型-视图-控制器-模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mvc-模型-视图-控制器-模式","aria-hidden":"true"}},[a._v("#")]),a._v(" MVC(模型-视图-控制器)模式")]),r("p",[a._v("模型代表一个存取数据的对象，它也可以带有逻辑，在数据变化时更新控制器。\n视图代表模型包含的数据的可视化。\n控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开。")]),r("h3",{attrs:{id:"业务代表模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#业务代表模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 业务代表模式")]),r("p",[a._v("将业务实现和前端展示分割，由一个中间代表来连接客户端和业务端，减少客户端和业务端的通信复杂度。\n业务实现向外统一暴露接口，由业务代表来具体查询和掉用业务接口执行相关业务，而客户则只需要想业务代表调用相关简化后的接口即可实现响应业务。")]),r("p",[a._v("用于对表示层和业务层解耦。\n它基本上是用来减少通信或对表示层代码中的业务层代码的远程查询功能。")]),r("p",[a._v("在业务层中我们有以下实体。")]),r("ul",[r("li",[a._v("客户端(Client)：表示层代码可以是 JSP、servlet 或 UI java 代码。")]),r("li",[a._v("业务代表(Business Delegate)：一个为客户端实体提供的入口类，它提供了对业务服务方法的访问。")]),r("li",[a._v("查询服务(LookUp Service)：查找服务对象负责获取相关的业务实现，并提供业务对象对业务代表对象的访问。")]),r("li",[a._v("业务服务(Business Service)：业务服务接口。实现了该业务服务的实体类，提供了实际的业务实现逻辑。")])]),r("h3",{attrs:{id:"组合实体模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#组合实体模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 组合实体模式")]),r("p",[a._v("用在 EJB 持久化机制中。\n一个组合实体是一个 EJB 实体 bean，代表了对象的图解。当更新一个组合实体时，内部依赖对象 beans 会自动更新，因为它们是由 EJB 实体 bean 管理的。")]),r("p",[a._v("以下是组合实体 bean 的参与者。")]),r("ul",[r("li",[a._v("组合实体(Composite Entity)：它是主要的实体 bean。它可以是粗粒的，或者可以包含一个粗粒度对象，用于持续生命周期。")]),r("li",[a._v("粗粒度对象(Coarse-Grained Object)：该对象包含依赖对象。它有自己的生命周期，也能管理依赖对象的生命周期。")]),r("li",[a._v("依赖对象(Dependent Object)：依赖对象是一个持续生命周期依赖于粗粒度对象的对象。")]),r("li",[a._v("策略(Strategies)：策略表示如何实现组合实体。")])]),r("h3",{attrs:{id:"数据访问对象-dao-模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数据访问对象-dao-模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 数据访问对象(DAO)模式")]),r("p",[a._v("用于把低级的数据访问 API 或操作从高级的业务服务中分离出来。")]),r("p",[a._v("以下是数据访问对象模式的参与者。")]),r("ul",[r("li",[a._v("数据访问对象接口(Data Access Object Interface)：该接口定义了在一个模型对象上要执行的标准操作。")]),r("li",[a._v("数据访问对象实体类(Data Access Object concrete class)：该类实现了上述的接口。该类负责从数据源获取数据，数据源可以是数据库，也可以是 xml，或者是其他的存储机制。")]),r("li",[a._v("模型对象/数值对象(Model Object/Value Object)：该对象是简单的 POJO，包含了 get/set 方法来存储通过使用 DAO 类检索到的数据。")])]),r("h3",{attrs:{id:"前端控制器模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#前端控制器模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 前端控制器模式")]),r("p",[a._v("用来提供一个集中的请求处理机制，所有的请求都将由一个单一的处理程序处理。该处理程序可以做认证/授权/记录日志，或者跟踪请求，然后把请求传给相应的处理程序。")]),r("p",[a._v("以下是这种设计模式的实体。")]),r("ul",[r("li",[a._v("前端控制器(Front Controller)：处理应用程序所有类型请求的单个处理程序，应用程序可以是基于 web 的应用程序，也可以是基于桌面的应用程序。")]),r("li",[a._v("调度器(Dispatcher)：前端控制器可能使用一个调度器对象来调度请求到相应的具体处理程序。")]),r("li",[a._v("视图(View)：视图是为请求而创建的对象。")])]),r("h3",{attrs:{id:"拦截过滤器模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#拦截过滤器模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 拦截过滤器模式")]),r("p",[a._v("用于对应用程序的请求或响应做一些预处理/后处理。定义过滤器，并在把请求传给实际目标应用程序之前应用在请求上。过滤器可以做认证/授权/记录日志，或者跟踪请求，然后把请求传给相应的处理程序。")]),r("p",[a._v("以下是这种设计模式的实体。")]),r("ul",[r("li",[a._v("过滤器(Filter)：过滤器在请求处理程序执行请求之前或之后，执行某些任务。")]),r("li",[a._v("过滤器链(Filter Chain)：过滤器链带有多个过滤器，并在 Target 上按照定义的顺序执行这些过滤器。")]),r("li",[a._v("Target：Target 对象是请求处理程序。")]),r("li",[a._v("过滤管理器(Filter Manager)：过滤管理器管理过滤器和过滤器链。")]),r("li",[a._v("客户端(Client)：Client 是向 Target 对象发送请求的对象。")])]),r("h3",{attrs:{id:"服务定位器模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#服务定位器模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 服务定位器模式")]),r("p",[a._v("用在我们想使用 JNDI 查询定位各种服务的时候。考虑到为某个服务查找 JNDI 的代价很高，服务定位器模式充分利用了缓存技术。在首次请求某个服务时，服务定位器在 JNDI 中查找服务，并缓存该服务对象。当再次请求相同的服务时，服务定位器会在它的缓存中查找，这样可以在很大程度上提高应用程序的性能。")]),r("p",[a._v("以下是这种设计模式的实体。")]),r("ul",[r("li",[a._v("服务(Service)：实际处理请求的服务。对这种服务的引用可以在 JNDI 服务器中查找到。")]),r("li",[a._v("Context/初始的Context：JNDI Context 带有对要查找的服务的引用。")]),r("li",[a._v("服务定位器(Service Locator)：服务定位器是通过 JNDI 查找和缓存服务来获取服务的单点接触。")]),r("li",[a._v("缓存(Cache)：缓存存储服务的引用，以便复用它们。")]),r("li",[a._v("客户端(Client)：Client 是通过 ServiceLocator 调用服务的对象。")])]),r("h3",{attrs:{id:"传输对象模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#传输对象模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 传输对象模式")]),r("p",[a._v("用于从客户端向服务器一次性传递带有多个属性的数据。传输对象也被称为数值对象。传输对象是一个具有 getter/setter 方法的简单的 POJO 类，它是可序列化的，所以它可以通过网络传输。它没有任何的行为。服务器端的业务类通常从数据库读取数据，然后填充 POJO，并把它发送到客户端或按值传递它。对于客户端，传输对象是只读的。客户端可以创建自己的传输对象，并把它传递给服务器，以便一次性更新数据库中的数值。")]),r("p",[a._v("以下是这种设计模式的实体。")]),r("ul",[r("li",[a._v("业务对象(Business Object)：为传输对象填充数据的业务服务。")]),r("li",[a._v("传输对象(Transfer Object)：简单的 POJO，只有设置/获取属性的方法。")]),r("li",[a._v("客户端(Client)：客户端可以发送请求或者发送传输对象到业务对象。")])])])}],!1,null,null,null);t.default=s.exports}}]);